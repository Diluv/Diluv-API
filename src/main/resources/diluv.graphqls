schema {
    query: Query
    mutation: Mutation
}

type Query {
    game(gameSlug: String!): Game
    games(limit: Int = 20, page: Int = 1, sort: String = "new"): [Game!]!
    project(gameSlug: String!, projectSlug: String!, projectTypeSlug: String!): Project
    projectById(id: Long!): Project
    projectFile(id: Long!): ProjectFile
    projectReviews(limit: Int = 20, page: Long = 1): [Project!]!
    projectType(gameSlug: String!, projectTypeSlug: String!): ProjectType
    projects(gameSlug: String!, projectTypeSlug: String!, limit: Int, page: Long, sort: String): [Project!]!
    stats: Stats!
    registrationCodes: [RegistrationCodes!]!
}

type Mutation {
    addLoader(gameSlug: String!, loaderName: String!, loaderSlug: String!, projectTypeSlug: String!): ProjectType
    addProjectType(gameSlug: String!, isDefault: Boolean!, maxFileSize: Long, projectTypeName: String!, projectTypeSlug: String!): ProjectType!
    addTag(gameSlug: String!, projectTypeSlug: String!, tagName: String!, tagSlug: String!): ProjectType
    reviewed(projectId: ID!, reason: String, requestChange: Boolean!): Project!
    updateProjectType(gameSlug: String!, isDefault: Boolean, maxFileSize: Long, projectTypeName: String, projectTypeSlug: String!): ProjectType!
    registrationCodes(count: Int! = 5): [RegistrationCodes!]!
}

type Author {
    role: String!
    user: User!
}

type Game {
    createdAt: String!
    defaultProjectType: String!
    gameVersions: [GameVersion!]!
    logo: Image!
    name: String!
    projectTypes: [ProjectType!]!
    slug: ID!
    url: String!
}

type GameVersion {
    id: Long!
    releasedAt: String!
    type: String!
    version: String!
}

type Image {
    fallback: ImageSource!
    sources: [ImageSource!]!
}

type ImageSource {
    src: String!
    type: String!
}

type Project {
    owner: User!
    authors: [Author!]!
    createdAt: Long!
    description: String!
    downloads: Long!
    files: [ProjectFile!]!
    game: Game!
    id: ID!
    logo: String!
    name: String!
    projectType: ProjectType!
    released: Boolean!
    review: Boolean!
    slug: String!
    summary: String!
    tags: [SlugName!]!
    updatedAt: Long!
}

type ProjectFile {
    changelog: String!
    classifier: String!
    createdAt: Long!
    downloadURL: String!
    downloads: Long!
    gameVersions: [GameVersion!]!
    id: ID!
    name: String!
    releaseType: String!
    released: Boolean!
    size: Long!
}

type ProjectType {
    game: Game!
    loaders: [ProjectTypeLoader!]!
    maxFileSize: Long!
    name: String!
    slug: String!
    tags: [SlugName!]!
}

type ProjectTypeLoader {
    id: ID!
    name: String!
    projectType: ProjectType!
    slug: String!
}

type SlugName {
    name: String!
    slug: String!
}

type User {
    createdAt: Long!
    displayName: String!
    id: ID!
    username: String!
}

type Stats {
    gameCount: Long!
    projectCount: Long!
    unreleasedProjectCount: Long!
    userCount: Long!
    tempUserCount: Long!
    fileSize: Long!
}

type RegistrationCodes {
    code: String!
    createdAt: Long!
    user: User!
}

scalar Long